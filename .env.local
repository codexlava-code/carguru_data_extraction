# Vehicle post url
VEHICLE_API_URL="https://retoolapi.dev/75Qs6K/data"
DEALERSHIP_API_URL="https://retoolapi.dev/TLpOPn/data"

SLACK_BOT_TOKEN="xoxb-8104347625139-8544713643409-37Z4UzEIkGpUA5ArzSUx3Wc6"
SLACK_SIGNING_SECRET="ecdfd545eac42f98586bb00519ec5df7"
SLACK_CHANNEL="C08FQ51LEAF"

### Vehicle data max thread
MAX_THREAD=10

# Post vehicle data
SEND_BATCH_SIZE=5
MAX_RETRY_ATTEMPTS=2


#Suggested approach for managing configuration:
#Use Pydantic for configuration management as it ease of use, type validation and other bunch of benefits.
#Implement LRU cache for configuration loading. This improves performance by storing the config in memory instead of reading it from a file repeatedly.
#If certain configuration values remain the same across development and production (e.g., API_URL = "https://retoolapi.dev/TLpOPn/data"), store them directly in config.py.
#If configuration values vary between environments (e.g., MAX_THREADS = 10 for production and MAX_THREADS = 5 for development), store them in .env and load them in config.py.
#Maintain a .env.example file as a reference for others to set up their environment variables.
#Code Quality Improvements
#Use Ruff linter to detect and remove unused imports and code formatting.
#Jupyter Notebooks
#Store all .ipynb files in a dedicated notebooks folder for better organization.
#Remove unused code
#remove unused code like classes of utils.py not used in the project.